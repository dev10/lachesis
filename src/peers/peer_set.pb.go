// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer_set.proto

package peers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PeerSet is a set of Peers forming a consensus network
type PeerSet struct {
	Peers    []*Peer          `protobuf:"bytes,1,rep,name=Peers,proto3" json:"Peers,omitempty"`
	ByPubKey map[string]*Peer `protobuf:"bytes,2,rep,name=ByPubKey,proto3" json:"ByPubKey,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ById     map[int64]*Peer  `protobuf:"bytes,3,rep,name=ById,proto3" json:"ById,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cached values
	Hash_                []byte   `protobuf:"bytes,4,opt,name=hash_,json=hash,proto3" json:"hash_,omitempty"`
	Hex_                 string   `protobuf:"bytes,5,opt,name=hex_,json=hex,proto3" json:"hex_,omitempty"`
	SuperMajority_       int64    `protobuf:"varint,6,opt,name=superMajority_,json=superMajority,proto3" json:"superMajority_,omitempty"`
	TrustCount_          int64    `protobuf:"varint,7,opt,name=trustCount_,json=trustCount,proto3" json:"trustCount_,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerSet) Reset()         { *m = PeerSet{} }
func (m *PeerSet) String() string { return proto.CompactTextString(m) }
func (*PeerSet) ProtoMessage()    {}
func (*PeerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f08bb3eff23efcf, []int{0}
}

func (m *PeerSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerSet.Unmarshal(m, b)
}
func (m *PeerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerSet.Marshal(b, m, deterministic)
}
func (m *PeerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSet.Merge(m, src)
}
func (m *PeerSet) XXX_Size() int {
	return xxx_messageInfo_PeerSet.Size(m)
}
func (m *PeerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSet.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSet proto.InternalMessageInfo

func (m *PeerSet) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *PeerSet) GetByPubKey() map[string]*Peer {
	if m != nil {
		return m.ByPubKey
	}
	return nil
}

func (m *PeerSet) GetById() map[int64]*Peer {
	if m != nil {
		return m.ById
	}
	return nil
}

func (m *PeerSet) GetHash_() []byte {
	if m != nil {
		return m.Hash_
	}
	return nil
}

func (m *PeerSet) GetHex_() string {
	if m != nil {
		return m.Hex_
	}
	return ""
}

func (m *PeerSet) GetSuperMajority_() int64 {
	if m != nil {
		return m.SuperMajority_
	}
	return 0
}

func (m *PeerSet) GetTrustCount_() int64 {
	if m != nil {
		return m.TrustCount_
	}
	return 0
}

func init() {
	proto.RegisterType((*PeerSet)(nil), "peers.PeerSet")
	proto.RegisterMapType((map[int64]*Peer)(nil), "peers.PeerSet.ByIdEntry")
	proto.RegisterMapType((map[string]*Peer)(nil), "peers.PeerSet.ByPubKeyEntry")
}

func init() { proto.RegisterFile("peer_set.proto", fileDescriptor_1f08bb3eff23efcf) }

var fileDescriptor_1f08bb3eff23efcf = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x49, 0xd3, 0x6e, 0xee, 0xd4, 0x0d, 0x8d, 0x37, 0x87, 0x22, 0x58, 0x05, 0xa1, 0x17,
	0xd2, 0x0b, 0xbd, 0x19, 0x5e, 0x4e, 0x05, 0x87, 0x08, 0xa3, 0x7b, 0x80, 0xd2, 0xb1, 0x03, 0xd5,
	0xc9, 0x5a, 0xf2, 0x47, 0x96, 0xf7, 0xf0, 0x81, 0x25, 0x29, 0xce, 0x8d, 0x5d, 0xed, 0x2a, 0x39,
	0xdf, 0xf7, 0xfb, 0x4e, 0x92, 0x13, 0x18, 0xb5, 0x44, 0xb2, 0x54, 0xa4, 0xf3, 0x56, 0x36, 0xba,
	0x11, 0x91, 0xab, 0x55, 0x02, 0x6e, 0xe9, 0xa4, 0x9b, 0x1f, 0x0e, 0xfd, 0x19, 0x91, 0x9c, 0x93,
	0x16, 0xd7, 0x10, 0xb9, 0xad, 0x42, 0x96, 0xf2, 0x2c, 0xbe, 0x8f, 0x73, 0x8f, 0xe7, 0x4e, 0x2b,
	0x3a, 0x47, 0x8c, 0xe1, 0x64, 0x62, 0x67, 0x66, 0xf1, 0x46, 0x16, 0x03, 0x4f, 0x5d, 0xee, 0x50,
	0x73, 0xd2, 0xf9, 0x9f, 0xfd, 0xb2, 0xd6, 0xd2, 0x16, 0x5b, 0x5a, 0xdc, 0x41, 0x38, 0xb1, 0xd3,
	0x25, 0x72, 0x9f, 0xc2, 0x83, 0xd4, 0x74, 0xd9, 0x25, 0x3c, 0x25, 0x2e, 0x20, 0xaa, 0x2b, 0x55,
	0x97, 0x18, 0xa6, 0x2c, 0x3b, 0x2d, 0x42, 0x57, 0x88, 0x73, 0x08, 0x6b, 0xda, 0x94, 0x18, 0xa5,
	0x2c, 0x1b, 0x14, 0xbc, 0xa6, 0x8d, 0xb8, 0x85, 0x91, 0x32, 0x2d, 0xc9, 0xf7, 0xea, 0xb3, 0x91,
	0x1f, 0xda, 0x96, 0xd8, 0x4b, 0x59, 0xc6, 0x8b, 0xe1, 0x9e, 0x2a, 0xae, 0x20, 0xd6, 0xd2, 0x28,
	0xfd, 0xd4, 0x98, 0xb5, 0x2e, 0xb1, 0xef, 0x19, 0xf8, 0x97, 0x92, 0x57, 0x18, 0xee, 0x5d, 0x5c,
	0x9c, 0x01, 0x5f, 0x91, 0x45, 0xd6, 0x1d, 0xb5, 0x22, 0xeb, 0xa6, 0xf3, 0x5d, 0x7d, 0x19, 0xc2,
	0x20, 0x65, 0x07, 0xd3, 0xf1, 0xce, 0x63, 0x30, 0x66, 0xc9, 0x33, 0x0c, 0xb6, 0x8f, 0xd9, 0xed,
	0xc2, 0x8f, 0xe9, 0xb2, 0xe8, 0xf9, 0xdf, 0x79, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xad, 0xc9,
	0xad, 0xea, 0xc2, 0x01, 0x00, 0x00,
}
