***************************************************************************************************************************************************
`src/trie/secure_trie.go <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go>`_
***************************************************************************************************************************************************


.. function:: type SecureTrie struct [line: 22]

	| SecureTrie wraps a trie with key hashing. In a secure trie, all
	| access operations hash the key using keccak256. This prevents
	| calling code from creating long chains of nodes that
	| increase the access time.
	| Contrary to a regular trie, a SecureTrie can only be created with
	| New and must have an attached database. The database also stores
	| the preimage of each key.
	| SecureTrie is not safe for concurrent use.

`View source at line: 22 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L22>`_

.. function:: func NewSecure(root hash.Hash, db *Database, cachelimit uint16) (*SecureTrie, error) [line: 40]

	| NewSecure creates a trie with an existing root node from a backing database
	| and optional intermediate in-memory node pool.
	| If root is the zero hash or the sha3 hash of an empty string, the
	| trie is initially empty. Otherwise, New will panic if db is nil
	| and returns MissingNodeError if the root node cannot be found.
	| Accessing the trie loads nodes from the database or node pool on demand.
	| Loaded nodes are kept around until their 'cache generation' expires.
	| A new cache generation is created by each call to Commit.
	| cachelimit sets the number of past cache generations to keep.

`View source at line: 40 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L40>`_

.. function:: func (t *SecureTrie) Get(key []byte) []byte [line: 54]

	| Get returns the value for key stored in the trie.
	| The value bytes must not be modified by the caller.

`View source at line: 54 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L54>`_

.. function:: func (t *SecureTrie) TryGet(key []byte) ([]byte, error) [line: 65]

	| TryGet returns the value for key stored in the trie.
	| The value bytes must not be modified by the caller.
	| If a node was not found in the database, a MissingNodeError is returned.

`View source at line: 65 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L65>`_

.. function:: func (t *SecureTrie) Update(key, value []byte) [line: 75]

	| Update associates key with value in the trie. Subsequent calls to
	| Get will return value. If value has length zero, any existing value
	| is deleted from the trie and calls to Get will return nil.
	| The value bytes must not be modified by the caller while they are
	| stored in the trie.

`View source at line: 75 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L75>`_

.. function:: func (t *SecureTrie) TryUpdate(key, value []byte) error [line: 89]

	| TryUpdate associates key with value in the trie. Subsequent calls to
	| Get will return value. If value has length zero, any existing value
	| is deleted from the trie and calls to Get will return nil.
	| The value bytes must not be modified by the caller while they are
	| stored in the trie.
	| If a node was not found in the database, a MissingNodeError is returned.

`View source at line: 89 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L89>`_

.. function:: func (t *SecureTrie) Delete(key []byte) [line: 100]

	| Delete removes any existing value for key from the trie.

`View source at line: 100 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L100>`_

.. function:: func (t *SecureTrie) TryDelete(key []byte) error [line: 108]

	| TryDelete removes any existing value for key from the trie.
	| If a node was not found in the database, a MissingNodeError is returned.

`View source at line: 108 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L108>`_

.. function:: func (t *SecureTrie) GetKey(shaKey []byte) []byte [line: 116]

	| GetKey returns the sha3 preimage of a hashed key that was
	| previously used to store a value.

`View source at line: 116 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L116>`_

.. function:: func (t *SecureTrie) Commit(onleaf LeafCallback) (root hash.Hash, err error) [line: 129]

	| Commit writes all nodes and the secure hash pre-images to the trie's database.
	| Nodes are stored with their sha3 hash as the key.
	| Committing flushes nodes from memory. Subsequent Get calls will load nodes
	| from the database.

`View source at line: 129 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L129>`_

.. function:: func (t *SecureTrie) Hash() hash.Hash [line: 146]

	| Hash returns the root hash of SecureTrie. It does not write to the
	| database and can be used even if the trie doesn't have one.

`View source at line: 146 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L146>`_

.. function:: func (t *SecureTrie) Root() []byte [line: 152]

	| Root returns the root hash of SecureTrie.
	| Deprecated: use Hash instead.

`View source at line: 152 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L152>`_

.. function:: func (t *SecureTrie) Copy() *SecureTrie [line: 157]

	| Copy returns a copy of SecureTrie.

`View source at line: 157 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L157>`_

.. function:: func (t *SecureTrie) NodeIterator(start []byte) NodeIterator [line: 164]

	| NodeIterator returns an iterator that returns nodes of the underlying trie. Iteration
	| starts at the key after the given start key.

`View source at line: 164 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L164>`_

.. function:: func (t *SecureTrie) hashKey(key []byte) []byte [line: 171]

	| hashKey returns the hash of key as an ephemeral buffer.
	| The caller must not hold onto the return value because it will become
	| invalid on the next call to hashKey or secKey.

`View source at line: 171 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L171>`_

.. function:: func (t *SecureTrie) getSecKeyCache() map[string][]byte [line: 183]

	| getSecKeyCache returns the current secure key cache, creating a new one if
	| ownership changed (i.e. the current secure trie is a copy of another owning
	| the actual cache).

`View source at line: 183 <https://github.com/Fantom-Foundation/go-lachesis/blob/d13e0509d9f34b1d57bf4842a89cf62dc940f3a1src/trie/secure_trie.go#L183>`_